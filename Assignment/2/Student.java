import java.util.*;
/**
* Assignment 2
* @author Alp Deniz Senyurt
* Student ID: 100342433
* Self explanatory variables and parameters will not be documented as they are, "self-explanatory".
*
*/
public class Student
{
	/**
	* Student class is a class for each student with various variables.
	* @param firstName First firstName variable String
	* @param lastName Last firstName variable [String]
	* @param studentNumber Stores student number [Long]
	* @param quizAverage Stores the average of the quiz scores of the student [Quiz]
	* @param loginID Login ID of the student. Created by the {@code createLoginID()} method which called at the end of the constructor. [String]
	* @param quizScores Stores the quiz scores of the student. [{@code ArrayList<Double>}]
	*/
	private String firstName;
	private String lastName;
	private static long count = 10000001;
	private long studentNumber;
	private String loginID;
	public ArrayList<Quiz> quizScores;


	/**
	* This method creates the Login ID for the student and is called by the constructor at the end of initilization of the instance object.
	* It has a simple check for last 2 digits as the way to obtain the last 2 digits of the student number is to modulo operation.
	* studentNumber % 100 gives the last 2 digits. However, if the remainder is less than 10, it will be single digit without the leading zero. 
	* The if condition in line 52 checks for the leading zero.
	* Stores the loginID in the {@code loginID, private String} variable.
	*/
	private void createLoginID()	//private since it is only accessible from constructor. No need to be accessible from outside
	{
		loginID = String.valueOf(firstName.charAt(0));
		if (lastName.length() >= 4)
		{
			loginID += lastName.substring(0, 4);
		}
		else
		{
			loginID += lastName;
		}
		loginID = loginID.toLowerCase();

		long tempINT = studentNumber % 100;
		String tempString = "0";
		if (tempINT < 10)	//simple test for remainder
		{
			tempString = "0" + Long.toString(tempINT);
			loginID += tempString;
		}
		else 
		{
			loginID += Long.toString(studentNumber % 100);
		}
		loginID = loginID;
	}

	/**
	* Constructor for Student class. Calls the createloginID() method and also assigns the unique student number.
	* @param firstName First firstName of the student
	* @param surName SurfirstName of the student
	*/
	public Student(String firstName, String surName)
	{
		this.firstName = firstName;
		this.lastName = surName;
		quizScores = new ArrayList<Quiz>();
		createLoginID();
		this.studentNumber = count;
		count++;
	}

	/**
	* Sets the student's firstName, lastName and student number. NOTE: Changing student's firstName does not affect the students's loginId
	* @param firstName First firstName of the student
	* @param surName SurfirstName of the student
	* @param studentNumber Student Number of the student
	*/
	public void setName(String firstName, String lastName)
	{
		this.firstName = firstName;
		this.lastName = lastName;
	}

	/** Returns firstName and lastName separated by comma (firstName, lastName)
	* @return "First firstName, Last firstName"
	*/
	public String getName()
	{
		return firstName + ", " + lastName;
	}
	
	/** Returns student number
	* @return studentNumber in {@code String} format
	*/
	public long getStudentNumber()
	{
		return studentNumber;
	}
	
	/** Returns the students login Id. Login Id is generated by class Student.
	* @return loginID in {@code String} format
	*/
	public String getLoginId()
	{
		return loginID;
	}
	
	/** Returns student's information.
	* @return Uses the following format: firstName, lastName (loginID, studentNumber)
	*/
	public String getInfo()
	{
		return firstName + "," + lastName + "(" + studentNumber + "," + loginID + ")";
	}
	

	
	/** Adds a quiz score to the student using {@code quizScores.add(quiz)}
	* @param scale scale of the quiz that will be added to the list
	* @param studentGrade student's grade of that quiz
	* Has a simple if-else check for scale < studentGrade condition.
	*/
	public void addQuiz(double scale, double studentGrade)
	{
		if (scale < studentGrade)
		{
			System.out.println("ERROR!\nStudent grade cannot be bigger than quiz scale!");
		}
		else
		{
			Quiz quiz = new Quiz(scale, studentGrade);
			quizScores.add(quiz);
		}
	}
	
	
	/** Override toString() method
	* @return Returns the Student class as a string including the student's firstName, studentID and loginID.
	*/
	@Override
	public String toString()
	{
		return "[firstName: " + firstName + " , lastName: " + lastName + " (StudnetId: " + studentNumber + ", loginId: " + loginID + ")]";
	}

}